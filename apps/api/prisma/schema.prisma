// Prisma schema for Grossanzeigen â€” Agent 3 (DB/Search/Media)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  USER
  SELLER
  ADMIN
}

enum ListingStatus {
  DRAFT
  ACTIVE
  SOLD
  EXPIRED
}

enum OrderState {
  CREATED
  PAID
  FULFILLED
  COMPLETED
  CANCELED
  REFUNDED
  DISPUTED
}

// Core: Users & Auth
model User {
  id           String    @id @default(uuid())
  email        String    @unique
  passwordHash String
  roles        Role[]
  emailVerifiedAt DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  profile      Profile?
  sessions     Session[]
  devices      Device[]
  listings     Listing[] @relation("SellerListings")
  conversations ConversationParticipant[]
  messages     Message[] @relation("UserMessages")
  favorites    Favorite[]
  notifications Notification[]
  verificationTokens VerificationToken[]
  passwordResets     PasswordReset[]
  messageReceipts    MessageReceipt[]
  buyerOrders        Order[]           @relation("BuyerOrders")
  sellerOrders       Order[]           @relation("SellerOrders")
  savedSearches      SavedSearch[]
  reports            Report[]
  auditLogs          AuditLog[]
}

model Profile {
  id         String   @id @default(uuid())
  userId     String   @unique
  displayName String
  avatarUrl  String? 
  bio        String?  @db.Text
  addresses  Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id])
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  token        String   @unique
  userAgent    String?
  ipAddress    String?
  createdAt    DateTime @default(now())
  expiresAt    DateTime

  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([token])
}

model Device {
  id           String   @id @default(uuid())
  userId       String
  identifier   String
  createdAt    DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id])

  @@unique([userId, identifier])
}

model VerificationToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model PasswordReset {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

// Catalog
model Category {
  id              String     @id @default(uuid())
  parentId        String?
  name            String
  attributeSchema Json?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  parent          Category?  @relation("CategoryToParent", fields: [parentId], references: [id])
  children        Category[] @relation("CategoryToParent")
  listings        Listing[]

  @@index([parentId])
  @@unique([parentId, name])
}

// Listings & Images
model Listing {
  id            String         @id @default(uuid())
  sellerId      String
  categoryId    String
  title         String
  description   String         @db.Text
  price         Int
  currency      String
  status        ListingStatus  @default(DRAFT)
  latitude      Decimal?       @db.Decimal(9, 6)
  longitude     Decimal?       @db.Decimal(9, 6)
  locationText  String?
  attributes    Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  seller        User           @relation("SellerListings", fields: [sellerId], references: [id])
  category      Category       @relation(fields: [categoryId], references: [id])
  images        ListingImage[]
  favorites     Favorite[]
  order         Order?

  @@index([status])
  @@index([price])
  @@index([createdAt])
  @@index([latitude])
  @@index([longitude])
}

model ListingImage {
  id               String  @id @default(uuid())
  listingId        String
  orderIndex       Int
  s3KeyOriginal    String
  variants         Json?
  createdAt        DateTime @default(now())

  listing          Listing @relation(fields: [listingId], references: [id])

  @@unique([listingId, orderIndex])
}

// Messaging
model Conversation {
  id            String                     @id @default(uuid())
  createdAt     DateTime                   @default(now())
  participants  ConversationParticipant[]
  messages      Message[]
}

model ConversationParticipant {
  conversationId String
  userId         String
  joinedAt       DateTime @default(now())

  conversation   Conversation @relation(fields: [conversationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@id([conversationId, userId])
  @@index([userId])
}

model Message {
  id             String     @id @default(uuid())
  conversationId String
  senderId       String
  text           String     @db.Text
  createdAt      DateTime   @default(now())

  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation("UserMessages", fields: [senderId], references: [id])
  receipts       MessageReceipt[]

  @@index([conversationId])
  @@index([senderId])
}

model MessageReceipt {
  messageId String
  userId    String
  readAt    DateTime?

  message   Message @relation(fields: [messageId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@id([messageId, userId])
  @@index([userId])
}

// Orders & Payments
model Order {
  id           String     @id @default(uuid())
  buyerId      String
  sellerId     String
  listingId    String     @unique
  amountTotal  Int
  currency     String
  state        OrderState @default(CREATED)
  timeline     Json?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  buyer        User       @relation("BuyerOrders", fields: [buyerId], references: [id])
  seller       User       @relation("SellerOrders", fields: [sellerId], references: [id])
  listing      Listing    @relation(fields: [listingId], references: [id])
  payment      Payment?
  refunds      Refund[]
  payouts      Payout[]

  @@index([buyerId])
  @@index([sellerId])
}

model Payment {
  id                       String   @id @default(uuid())
  orderId                  String   @unique
  stripePaymentIntentId    String?
  status                   String
  fees                     Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  order                    Order    @relation(fields: [orderId], references: [id])
}

model Refund {
  id        String   @id @default(uuid())
  orderId   String
  amount    Int
  createdAt DateTime @default(now())

  order     Order    @relation(fields: [orderId], references: [id])
}

model Payout {
  id        String   @id @default(uuid())
  orderId   String
  amount    Int
  createdAt DateTime @default(now())

  order     Order    @relation(fields: [orderId], references: [id])
}

// Social
model Favorite {
  userId    String
  listingId String
  createdAt DateTime @default(now())

  user      User    @relation(fields: [userId], references: [id])
  listing   Listing @relation(fields: [listingId], references: [id])

  @@id([userId, listingId])
  @@index([listingId])
}

model SavedSearch {
  id        String   @id @default(uuid())
  userId    String
  params    Json
  notify    Boolean  @default(true)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

// Notifications
model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  payload   Json
  readAt    DateTime?
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

// Moderation
model ModerationFlag {
  id          String   @id @default(uuid())
  subjectType String
  subjectId   String
  reason      String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([subjectType, subjectId])
}

model Report {
  id          String   @id @default(uuid())
  reporterId  String
  subjectType String
  subjectId   String
  reason      String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reporter    User     @relation(fields: [reporterId], references: [id])
}

model AuditLog {
  id        String   @id @default(uuid())
  actorId   String?
  action    String
  details   Json?
  createdAt DateTime @default(now())

  actor     User?    @relation(fields: [actorId], references: [id])
}

// Search Outbox
model SearchOutbox {
  id         String   @id @default(uuid())
  eventType  String
  entityType String
  entityId   String
  payload    Json?
  createdAt  DateTime @default(now())
  processedAt DateTime?

  @@index([processedAt])
  @@index([entityType, entityId])
}


